---
# tasks file for openvpn-role
- name: Check if openvpnv is installed
  package_facts:
    manager: "auto"

- name: Install openvpn
  ansible.builtin.apt:
    name: "{{ open_vpn_package }}"
    state: present
    update_cache: true
  become: true
  when: "'openvpn' not in ansible_facts.packages"

- name: Download compressed easyrsa package
  get_url:
    url: "{{ easy_rsa_package_url }}"
    dest: "/home/{{ admin }}"
  when: "'openvpn' not in ansible_facts.packages"

- name: Extract easyrsa package
  ansible.builtin.unarchive:
    src: "{{ compressed_easyrsa_package }}"
    dest: /home/gregory
    remote_src: true
  when: "'openvpn' not in ansible_facts.packages"

- name: Set easyrsa working dir
  ansible.builtin.file:
    path: "{{ easyrsa_home }}"
    state: directory
  when: "'openvpn' not in ansible_facts.packages"

# NOTE: copy does work well for copying recursively a dir content into another dir
- name: Copy easyrsa package files into easyrsa home dir
  ansible.builtin.shell: "cp -R {{ decompressed_easyrsa_package }}/*  {{ easyrsa_home }}"
  when: "'openvpn' not in ansible_facts.packages"

- name: Remove compressed easyrsa package
  ansible.builtin.file:
    path: "{{ compressed_easyrsa_package }}"
    state: absent
  when: "'openvpn' not in ansible_facts.packages"

- name: Remove decompressed easyrsa package
  ansible.builtin.file:
    path: "{{ decompressed_easyrsa_package }}"
    state: absent
  when: "'openvpn' not in ansible_facts.packages"

- name: Remove default vars.example
  ansible.builtin.file:
    path: "{{ easyrsa_home }}/vars.example"
    state: absent
  when: "'openvpn' not in ansible_facts.packages"

- name: Template vars file
  ansible.builtin.template:
    src: vars.j2
    dest: "{{ easyrsa_home }}/vars"
  when: "'openvpn' not in ansible_facts.packages"

- name: Init PKI
  ansible.builtin.shell: ./easyrsa init-pki
  args:
    chdir: "{{ easyrsa_home }}"
  when: "'openvpn' not in ansible_facts.packages"

- name: Generate CA certificate and private key
  ansible.builtin.shell: "EASYRSA_REQ_CN={{ easyrsa_ca_common_name }} sudo ./easyrsa --batch build-ca nopass"
  args:
    chdir: "{{ easyrsa_home }}"
  when: "'openvpn' not in ansible_facts.packages"

- name: Generate server certificate and private key
  ansible.builtin.shell: "sudo ./easyrsa --batch gen-req server nopass"
  args:
    chdir: "{{ easyrsa_home }}"
  when: "'openvpn' not in ansible_facts.packages"

- name: Copy server key to /etc/openvpn/server
  ansible.builtin.copy:
    remote_src: true
    src: "{{ easyrsa_home }}/pki/private/server.key"
    dest: /etc/openvpn/server
  become: true
  when: "'openvpn' not in ansible_facts.packages"

- name: Sign the server request
  ansible.builtin.shell: |
    cat << EOF | sudo ./easyrsa sign-req server server
    yes
    EOF
  args:
    chdir: "{{ easyrsa_home }}"
  when: "'openvpn' not in ansible_facts.packages"

- name: Copy ca.cert to /etc/openvpn/server
  ansible.builtin.copy:
    remote_src: true
    src: "{{ easyrsa_home }}/pki/ca.crt"
    dest: /etc/openvpn/server
  become: true
  when: "'openvpn' not in ansible_facts.packages"

- name: Copy server.crt to /etc/openvpn/server
  ansible.builtin.copy:
    remote_src: true
    src: "{{ easyrsa_home }}/pki/issued/server.crt"
    dest: /etc/openvpn/server
  become: true
  when: "'openvpn' not in ansible_facts.packages"

- name: Generate pre-shared static key to encrypt control channel packets
  ansible.builtin.shell: sudo openvpn --genkey --secret ta.key
  args:
    chdir: "{{ easyrsa_home }}"
  when: "'openvpn' not in ansible_facts.packages"

- name: Copy ta.key to /etc/openvpn/server
  ansible.builtin.copy:
    remote_src: true
    src: "{{ easyrsa_home }}/ta.key"
    dest: /etc/openvpn/server
  become: true
  when: "'openvpn' not in ansible_facts.packages"

- name: Create clients keys dir
  ansible.builtin.file:
    mode: '0700'
    owner: "{{ admin }}"
    path: "{{ easyrsa_home }}/clients-keys"
    recurse: true
    state: directory
  when: "'openvpn' not in ansible_facts.packages"


- name: Check existing clients list
  stat:
    path: "{{ easyrsa_home }}/pki/private/{{ item }}.key"
  register: clients_list
  with_items: "{{ clients }}"

- name: Create client if not already existing
  ansible.builtin.shell: "sudo ./easyrsa --batch gen-req {{ item[1] }} nopass"
  args:
    chdir: "{{ easyrsa_home }}"
  when: not item[0].stat.exists
  with_together:
    - "{{ clients_list.results }}"
    - "{{ clients }}"

- name: Create client.name subdir of clients-keys dir
  ansible.builtin.file:
    mode: '0700'
    owner: "{{ admin }}"
    path: "{{ easyrsa_home }}/clients-keys/{{ item[1] }}"
    state: directory
  when: not item[0].stat.exists
  with_together:
    - "{{ clients_list.results }}"
    - "{{ clients }}"

- name: Copy clients' private key to clients-keys dir
  ansible.builtin.copy:
    mode: '0700'
    owner: "{{ admin }}"
    src: "{{ easyrsa_home }}/pki/private/{{ item[1] }}.key"
    dest: "{{ easyrsa_home }}/clients-keys/{{ item[1] }}"
    remote_src: true
  become: true
  when: not item[0].stat.exists
  with_together:
    - "{{ clients_list.results }}"
    - "{{ clients }}"

- name: Sign the server request
  ansible.builtin.shell: |
    cat << EOF | sudo ./easyrsa sign-req client "{{ item[1] }}"
    yes
    EOF
  args:
    chdir: "{{ easyrsa_home }}"
  when: not item[0].stat.exists
  with_together:
    - "{{ clients_list.results }}"
    - "{{ clients }}"

- name: Copy clients' certificate to clients-keys dir
  ansible.builtin.copy:
    mode: '0700'
    owner: "{{ admin }}"
    src: "{{ easyrsa_home }}/pki/issued/{{ item[1] }}.crt"
    dest: "{{ easyrsa_home }}/clients-keys/{{ item[1] }}"
    remote_src: true
  become: true
  when: not item[0].stat.exists
  with_together:
    - "{{ clients_list.results }}"
    - "{{ clients }}"

- name: Copy ta.key to clients-keys dir
  ansible.builtin.copy:
    remote_src: true
    src: "{{ easyrsa_home }}/ta.key"
    dest: "{{ easyrsa_home }}/clients-keys/{{ item[1] }}"
  when: not item[0].stat.exists
  become: true
  with_together:
    - "{{ clients_list.results }}"
    - "{{ clients }}"

- name: Copy ca.crt to clients-keys dir
  ansible.builtin.copy:
    remote_src: true
    src: "{{ easyrsa_home }}/pki/ca.crt"
    dest: "{{ easyrsa_home }}/clients-keys/{{ item[1] }}"
  when: not item[0].stat.exists
  become: true
  with_together:
    - "{{ clients_list.results }}"
    - "{{ clients }}"

- name: Template server.conf file
  ansible.builtin.template:
    src: server.conf.j2
    dest: "{{ openvpn_server_conf }}"
  become: true
  when: "'openvpn' not in ansible_facts.packages"

- name: Setup IP forwarding (tun -> eno1)
  lineinfile:
    path: "/etc/sysctl.conf"
    regexp: '^#net.ipv4.ip_forward=1'
    line: net.ipv4.ip_forward=1
    state: present
  become: true
  when: "'openvpn' not in ansible_facts.packages"

- name: Check if ufw is installed
  package_facts:
    manager: "auto"

- name: Update /etc/ufw/before.rules
  ansible.builtin.blockinfile:
    path: /etc/ufw/before.rules
    marker: "# <!-- {mark} ANSIBLE MANAGED BLOCK -->"
    block: |
      *nat
      :POSTROUTING ACCEPT [0:0]
      -A POSTROUTING -o {{ openvpn_dest_interface }} -j MASQUERADE
      COMMIT
  become: true
  when: "'ufw' not in ansible_facts.packages"

- name: Edit DEFAULT_FORWARD_POLICY in /etc/default/ufw
  ansible.builtin.lineinfile:
    path: /etc/default/ufw
    regexp: '^DEFAULT_FORWARD_POLICY'
    line: DEFAULT_FORWARD_POLICY="ACCEPT"
    state: present
  become: true
  when: "'ufw' not in ansible_facts.packages"

- name: Allow openvpn port
  community.general.ufw:
    rule: allow
    port: "{{ openvpn_port }}"
  become: true
  when: "'ufw' not in ansible_facts.packages"

- name: disable ufw
  community.general.ufw:
    state: disabled
  become: true
  when: "'ufw' not in ansible_facts.packages"

- name: activate ufw
  community.general.ufw:
    state: enabled
  become: true
  when: "'ufw' not in ansible_facts.packages"